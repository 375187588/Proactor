/**
 * \file CompletionEventQueue.hpp
 * \author Ronald T. Fernandez
 * \version 1.0
 * \brief Defines the hook method for processing the completion event (asynchronous operation)
 * generated by asynchronous operation.
 */

#ifndef COMPLETIONEVENTQUEUE_COMPLETIONEVENTQUEUE_HPP_
#define COMPLETIONEVENTQUEUE_COMPLETIONEVENTQUEUE_HPP_

#include <deque>
#include <memory>
#include <mutex>
#include <utility>

#include "../asyncOperation/AsynchronousOperation.hpp"

namespace proactor {
namespace completionEventQueue {

/**
 * This class defines the queue of completed events.
 */
template <typename T>
class CompletionEventQueue : private  std::deque<asyncOperation::AsynchronousOperation<T>*> {
private:
	/**
	 * Lock to push and pop events in the queue
	 */
	std::mutex mutex;
public:
	/**
	 * Class constructor
	 */
	CompletionEventQueue() : std::deque<asyncOperation::AsynchronousOperation<T>*>() {
	};

	/**
	 * Class destructor
	 */
	virtual ~CompletionEventQueue() {
		this->clear();
	};

	/**
	 * Pop an operation from the completion queue and remove it from the list
	 * @return An operation from the completion list
	 */
	asyncOperation::AsynchronousOperation<T>* pop() {
		// Lock the queue
		std::lock_guard<std::mutex> locker(mutex);

		// Get the first element
		asyncOperation::AsynchronousOperation<T>* p = this->front();

		// Remove the first element from the queue
		this->pop_front();

		// Return the retrieved first element
		return p;
	}

	/**
	 * Add an operation to the completion queue
	 */
	void push(asyncOperation::AsynchronousOperation<T> *operation, const unsigned int id) {
		// Lock the queue
		std::lock_guard<std::mutex> locker(mutex);
		// Insert the element into the queue
		this->push_back(operation);
	};

	/**
	 * Get the size of the completion queue
	 * @return	Size of the queue
	 */
	const size_t size() {
		// Lock the queue
		std::lock_guard<std::mutex> locker(mutex);
		// Return the size of the queue
		return std::deque<asyncOperation::AsynchronousOperation<T>*>::size();
	}
};

}
}

#endif /* COMPLETIONEVENTQUEUE_COMPLETIONEVENTQUEUE_HPP_ */
